/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package View;

import Dao.AdminEventDAO;
import Model.AdminEvent;
import Model.Event;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.JPopupMenu;
import javax.swing.JMenuItem;
import java.text.SimpleDateFormat;

/**
 *
 * @author sumitshah
 */
public class AdminEditEventStatus extends javax.swing.JFrame {

    private AdminEventDAO adminEventDAO;
    private DefaultTableModel tableModel;

    public AdminEditEventStatus() {
        initComponents();
        setLocationRelativeTo(null);
        setupTable();
        setupContextMenu();
        loadEventsToTable(); // âœ… Load data here
    }
    
    AdminEditEventStatus(int eventId) {
       initComponents(); // this sets up the GUI
       setupTable();
       setupContextMenu();
       loadEventsToTable();
    }

    /**
     * Creates new form AdminEditEventStatus
     * @param eventId
     */
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        jButton2.setText("jButton2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Screenshot 2025-05-22 at 20.45.48.png"))); // NOI18N
        jLabel1.setText("jLabel1");

        jLabel2.setFont(new java.awt.Font("Helvetica Neue", 1, 36)); // NOI18N
        jLabel2.setText("Edit Event Status");

        jButton1.setBackground(new java.awt.Color(0, 0, 255));
        jButton1.setFont(new java.awt.Font("Helvetica Neue", 1, 13)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Return to Homepage");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Event Id", "Event Title", "Event Type", "Venue", "Date", "Time", "Budgets (NRS.)", "Number of Guests", "Event Privacy", "Status"
            }
        ));
        jTable1.setColumnSelectionAllowed(true);
        jScrollPane1.setViewportView(jTable1);
        jTable1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jButton3.setBackground(new java.awt.Color(0, 0, 255));
        jButton3.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jButton3.setForeground(new java.awt.Color(255, 255, 255));
        jButton3.setText("Approve");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(0, 0, 255));
        jButton4.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jButton4.setForeground(new java.awt.Color(255, 255, 255));
        jButton4.setText("Cancel Event");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(0, 0, 255));
        jButton5.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jButton5.setForeground(new java.awt.Color(255, 255, 255));
        jButton5.setText("View Details");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(0, 128, 0));
        jButton6.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(255, 255, 255));
        jButton6.setText("Refresh");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Helvetica Neue", 1, 14)); // NOI18N
        jLabel3.setText("Event Statistics:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 321, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(247, 247, 247)
                .addComponent(jButton1)
                .addGap(25, 25, 25))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(34, 34, 34)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(77, 77, 77))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(58, 58, 58)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jButton6)
                    .addComponent(jButton5)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addGap(27, 27, 27))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
            this.dispose();
    new AdminDashboard().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
         updateEventStatus("Approved");
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
       
    int selectedRow = jTable1.getSelectedRow(); // Replace with your actual JTable name

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row.");
        return;
    }

    Object value = jTable1.getValueAt(selectedRow, 0); // Assuming column 0 holds event ID

    if (value == null) {
        JOptionPane.showMessageDialog(this, "Empty selection.");
        return;
    }

    int eventId = (Integer) value;
    new AdminViewEventDetails(eventId).setVisible(true);

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        updateEventStatus("Cancelled");
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        loadEventsToTable();
        updateEventStatistics();
    }//GEN-LAST:event_jButton6ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
     try {
        for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                javax.swing.UIManager.setLookAndFeel(info.getClassName());
                break;
            }
        }
    } catch (ClassNotFoundException | IllegalAccessException | InstantiationException | UnsupportedLookAndFeelException ex) {
    }

    java.awt.EventQueue.invokeLater(() -> {
         int eventId = 0;
        new AdminEditEventStatus(eventId).setVisible(true);  // SHOW THE FRAME
    });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    private void setupTable() {
        adminEventDAO = new AdminEventDAO();
        tableModel = (DefaultTableModel) jTable1.getModel();
        
        // Set table properties
        jTable1.setRowHeight(25);
        jTable1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        
        // Make table non-editable except for status column
        jTable1.setDefaultEditor(Object.class, null);
    }
    
    private void setupContextMenu() {
        JPopupMenu popupMenu = new JPopupMenu();
        
        JMenuItem viewItem = new JMenuItem("View Details");
        JMenuItem approveItem = new JMenuItem("Approve Event");
        JMenuItem cancelItem = new JMenuItem("Cancel Event");
        JMenuItem refreshItem = new JMenuItem("Refresh");
        
        viewItem.addActionListener(e -> jButton5ActionPerformed(null));
        approveItem.addActionListener(e -> jButton3ActionPerformed(null));
        cancelItem.addActionListener(e -> jButton4ActionPerformed(null));
        refreshItem.addActionListener(e -> jButton6ActionPerformed(null));
        
        popupMenu.add(viewItem);
        popupMenu.addSeparator();
        popupMenu.add(approveItem);
        popupMenu.add(cancelItem);
        popupMenu.addSeparator();
        popupMenu.add(refreshItem);
        
        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    int row = jTable1.rowAtPoint(e.getPoint());
                    if (row >= 0) {
                        jTable1.setRowSelectionInterval(row, row);
                        popupMenu.show(jTable1, e.getX(), e.getY());
                    }
                }
            }
        });
        
        // Double-click to view details
        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) {
                    jButton5ActionPerformed(null);
                }
            }
        });
    }

    private void loadEventById() {
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select an event to view.");
        return;
    }

    String eventId = jTable1.getValueAt(selectedRow, 0).toString();
    String eventTitle = jTable1.getValueAt(selectedRow, 1).toString();
    // You can retrieve more data as needed

    JOptionPane.showMessageDialog(this, "Event ID: " + eventId + "\nTitle: " + eventTitle);
}

   private void updateEventStatus(String status) {
    int selectedRow = jTable1.getSelectedRow();
    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select an event to update.");
        return;
    }

    try {
        int eventId = (Integer) jTable1.getValueAt(selectedRow, 0);
        String currentStatus = (String) jTable1.getValueAt(selectedRow, 9);
        
        // Confirm the action
        int confirm = JOptionPane.showConfirmDialog(this, 
            "Are you sure you want to change the status of event '" + 
            jTable1.getValueAt(selectedRow, 1) + "' from '" + currentStatus + 
            "' to '" + status + "'?", 
            "Confirm Status Update", JOptionPane.YES_NO_OPTION);
            
        if (confirm == JOptionPane.YES_OPTION) {
            boolean success = adminEventDAO.updateEventStatus(eventId, status);
            
            if (success) {
                // Update the table
                jTable1.setValueAt(status, selectedRow, 9);
                JOptionPane.showMessageDialog(this, "Event status updated successfully to: " + status);
                updateEventStatistics();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to update event status. Please try again.");
            }
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error updating event status: " + e.getMessage());
        e.printStackTrace();
    }
   }
   
  private void loadEventsToTable() {
    try {
        List<Event> events = adminEventDAO.getAllEvents();
        tableModel.setRowCount(0); // Clear existing data

        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");
        
        for (Event e : events) {
            String formattedDate = e.getDate() != null ? dateFormat.format(e.getDate()) : "N/A";
            
            tableModel.addRow(new Object[]{
                e.getEventId(),
                e.getTitle(),
                e.getType(),
                e.getVenue(),
                formattedDate,
                e.getTime(),
                String.format("NRs. %.2f", e.getBudget()),
                e.getGuests(),
                e.getPrivacy(),
                e.getStatus() != null ? e.getStatus() : "Pending"
            });
        }
        
        updateEventStatistics();
        
        if (events.isEmpty()) {
            JOptionPane.showMessageDialog(this, "No events found in the database.");
        }
        
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error loading events: " + e.getMessage());
        e.printStackTrace();
    }
} 

private void updateEventStatistics() {
    try {
        List<Event> events = adminEventDAO.getAllEvents();
        
        int totalEvents = events.size();
        int pendingEvents = 0;
        int approvedEvents = 0;
        int cancelledEvents = 0;
        
        for (Event event : events) {
            String status = event.getStatus();
            if (status == null || status.equals("Pending")) {
                pendingEvents++;
            } else if (status.equals("Approved")) {
                approvedEvents++;
            } else if (status.equals("Cancelled")) {
                cancelledEvents++;
            }
        }
        
        jLabel3.setText(String.format("Event Statistics: Total: %d | Pending: %d | Approved: %d | Cancelled: %d", 
                                     totalEvents, pendingEvents, approvedEvents, cancelledEvents));
        
    } catch (Exception e) {
        jLabel3.setText("Event Statistics: Error loading data");
        e.printStackTrace();
    }
}
}



    


